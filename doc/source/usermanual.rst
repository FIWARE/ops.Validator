..
      Licensed under the Apache License, Version 2.0 (the "License"); you may
      not use this file except in compliance with the License. You may obtain
      a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations
      under the License.

===========================
User and Programmers manual
===========================

Introduction
============

FIWARE Validator
----------------------

A docker-based validator for the testing of deployment artifacts implemented as
a service with a RESTful API and a WebUI for individual user self-service.

External Dependencies
---------------------

The system deployment depends on several external services for successful completion.
The dependency list reads as follows:

- FIWARE IdM server:
    Used for authenticating users

- Docker daemon:
    Used to deploy the test images

User Guide
==========

Installation
------------

Please, consult the installation and admin guide for details on installation, deployment and testing.

Configuration
-------------

All system behaviour can be controlled by modifying the configuration files.
The system-wide configuration is accessible in etc/bork_api/bork_api.conf.
A sample configuration file with sane defaults is provided for ease of usage as etc/bork_api/bork_api.conf.sample, and can be customized as desired.
A fresh configuration file with all default parameters can be generated by executing:
::

    ./tools/generateconfig.[bat|sh]

Changing the extension based on your os of choice.

Programmer Guide
================

Validation Process
------------------

The validation process consists on the following steps:
1. The User interacts with the **WEB UI**, indicating:
    - Authentication credentials.
    - Github Reposity to get a new deployment artifact.
    - Deployment artifact placed in current server user Git repository.
    - Desired Operating System against which to validate.

2. The **WEB UI** sends a POST request to the service API, containing all the pertaining data.

3. The **API** receives the request and takes the following steps:
    - Checks the user permissions to take the next steps by validating against the IdM
    - Downloads the needed *dependencies*
    - Deploys the selected *container* image
    - Instructs the **Deployment Server** to deploy the *artifact* in the given *container*
    - Responds to the **Client** request informing of the status of the validation process

4. The User can also choose to upload the validated artifact to the official Github project repository.

API Definition
--------------

The API definition can be found at http://docs.uservalidatorapi.apiary.io/#
